{
	"info": {
		"_postman_id": "340cc4a8-2501-4687-9d43-736417fad087",
		"name": "Coinmatch - Limit Order Book API",
		"description": "Complete API collection for testing the Coinmatch limit order book matching engine.\n\n## Test Sequence:\n1. Health Check\n2. Add Currency Pairs (Admin)\n3. Place Orders (Buy/Sell)\n4. View Order Book\n5. Get User Orders\n6. Cancel Orders",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26142070"
	},
	"item": [
		{
			"name": "02. Currency Management",
			"item": [
				{
					"name": "Add BTC/USDT Pair (Admin)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"base\": \"BTC\",\n  \"quote\": \"USDT\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/pairs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"pairs"
							]
						},
						"description": "Add BTC/USDT trading pair (requires admin token)"
					},
					"response": []
				},
				{
					"name": "Add ETH/USDT Pair (Admin)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"base\": \"ETH\",\n  \"quote\": \"USDT\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/pairs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"pairs"
							]
						},
						"description": "Add ETH/USDT trading pair"
					},
					"response": []
				},
				{
					"name": "Add Pair Without Auth (Should Fail)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"base\": \"LTC\",\n  \"quote\": \"USDT\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/pairs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"pairs"
							]
						},
						"description": "Test admin authentication - should return 401"
					},
					"response": []
				}
			],
			"description": "Currency pair management endpoints"
		},
		{
			"name": "03. Order Placement",
			"item": [
				{
					"name": "Place Buy Order - User 123",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pair\": \"BTC/USDT\",\n  \"side\": \"buy\",\n  \"price\": 29500.00,\n  \"quantity\": 0.5,\n  \"user_id\": 123\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							]
						},
						"description": "Place a buy order for 0.5 BTC at $29,500"
					},
					"response": []
				},
				{
					"name": "Place Sell Order - User 456",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pair\": \"BTC/USDT\",\n  \"side\": \"sell\",\n  \"price\": 29600.00,\n  \"quantity\": 0.3,\n  \"user_id\": 456\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							]
						},
						"description": "Place a sell order for 0.3 BTC at $29,600"
					},
					"response": []
				},
				{
					"name": "Place Higher Buy Order - User 789",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pair\": \"BTC/USDT\",\n  \"side\": \"buy\",\n  \"price\": 29700.00,\n  \"quantity\": 0.2,\n  \"user_id\": 789\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							]
						},
						"description": "Place a higher buy order that should match with the sell order"
					},
					"response": []
				},
				{
					"name": "Place Lower Sell Order - User 101",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pair\": \"BTC/USDT\",\n  \"side\": \"sell\",\n  \"price\": 29400.00,\n  \"quantity\": 0.4,\n  \"user_id\": 101\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							]
						},
						"description": "Place a lower sell order that should match with buy orders"
					},
					"response": []
				},
				{
					"name": "Invalid Order - Missing Fields",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pair\": \"BTC/USDT\",\n  \"side\": \"buy\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							]
						},
						"description": "Test validation - should return 400 error"
					},
					"response": []
				},
				{
					"name": "Invalid Order - Negative Price",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pair\": \"BTC/USDT\",\n  \"side\": \"buy\",\n  \"price\": -100.00,\n  \"quantity\": 0.1,\n  \"user_id\": 999\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							]
						},
						"description": "Test validation - negative price should fail"
					},
					"response": []
				}
			],
			"description": "Order placement and validation tests"
		},
		{
			"name": "04. Order Book Queries",
			"item": [
				{
					"name": "View BTC/USDT Order Book",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orderbook?pair=BTC/USDT&depth=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orderbook"
							],
							"query": [
								{
									"key": "pair",
									"value": "BTC/USDT"
								},
								{
									"key": "depth",
									"value": "10"
								}
							]
						},
						"description": "Get current order book for BTC/USDT with depth 10"
					},
					"response": []
				},
				{
					"name": "View Order Book - Limited Depth",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orderbook?pair=BTC/USDT&depth=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orderbook"
							],
							"query": [
								{
									"key": "pair",
									"value": "BTC/USDT"
								},
								{
									"key": "depth",
									"value": "5"
								}
							]
						},
						"description": "Get order book with limited depth"
					},
					"response": []
				},
				{
					"name": "View Order Book - No Depth",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orderbook?pair=BTC/USDT",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orderbook"
							],
							"query": [
								{
									"key": "pair",
									"value": "BTC/USDT"
								}
							]
						},
						"description": "Get order book with default depth"
					},
					"response": []
				},
				{
					"name": "View Non-existent Pair",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orderbook?pair=DOGE/USDT&depth=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orderbook"
							],
							"query": [
								{
									"key": "pair",
									"value": "DOGE/USDT"
								},
								{
									"key": "depth",
									"value": "10"
								}
							]
						},
						"description": "Test non-existent trading pair - should return empty order book"
					},
					"response": []
				},
				{
					"name": "View ETH/USDT Order Book",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orderbook?pair=ETH/USDT&depth=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orderbook"
							],
							"query": [
								{
									"key": "pair",
									"value": "ETH/USDT"
								},
								{
									"key": "depth",
									"value": "10"
								}
							]
						},
						"description": "Get order book for ETH/USDT (should be empty initially)"
					},
					"response": []
				}
			],
			"description": "Order book viewing and querying tests"
		},
		{
			"name": "05. User Order Queries",
			"item": [
				{
					"name": "Get Orders for User 123",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orders?user_id=123",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							],
							"query": [
								{
									"key": "user_id",
									"value": "123"
								}
							]
						},
						"description": "Get all orders for user 123"
					},
					"response": []
				},
				{
					"name": "Get Orders for User 456",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orders?user_id=456",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							],
							"query": [
								{
									"key": "user_id",
									"value": "456"
								}
							]
						},
						"description": "Get all orders for user 456"
					},
					"response": []
				},
				{
					"name": "Get Orders for User 789",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orders?user_id=789",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							],
							"query": [
								{
									"key": "user_id",
									"value": "789"
								}
							]
						},
						"description": "Get all orders for user 789"
					},
					"response": []
				},
				{
					"name": "Get Orders for Non-existent User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orders?user_id=99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							],
							"query": [
								{
									"key": "user_id",
									"value": "99999"
								}
							]
						},
						"description": "Test non-existent user - should return empty array"
					},
					"response": []
				},
				{
					"name": "Invalid User ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orders?user_id=invalid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							],
							"query": [
								{
									"key": "user_id",
									"value": "invalid"
								}
							]
						},
						"description": "Test invalid user ID - should return 400 error"
					},
					"response": []
				}
			],
			"description": "User order history and querying tests"
		},
		{
			"name": "06. Order Cancellation",
			"item": [
				{
					"name": "Cancel Order ID 1",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orders/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders",
								"1"
							]
						},
						"description": "Cancel order with ID 1 (if exists and cancellable)"
					},
					"response": []
				},
				{
					"name": "Cancel Order ID 2",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orders/2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders",
								"2"
							]
						},
						"description": "Cancel order with ID 2"
					},
					"response": []
				},
				{
					"name": "Cancel Non-existent Order",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orders/99999",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders",
								"99999"
							]
						},
						"description": "Test cancelling non-existent order - should return 404"
					},
					"response": []
				},
				{
					"name": "Cancel Invalid Order ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orders/invalid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders",
								"invalid"
							]
						},
						"description": "Test invalid order ID format - should return 400"
					},
					"response": []
				}
			],
			"description": "Order cancellation tests"
		},
		{
			"name": "07. ETH Trading Scenario",
			"item": [
				{
					"name": "Place ETH Buy Order",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pair\": \"ETH/USDT\",\n  \"side\": \"buy\",\n  \"price\": 1800.00,\n  \"quantity\": 2.0,\n  \"user_id\": 201\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							]
						},
						"description": "Place ETH buy order"
					},
					"response": []
				},
				{
					"name": "Place ETH Sell Order",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"pair\": \"ETH/USDT\",\n  \"side\": \"sell\",\n  \"price\": 1750.00,\n  \"quantity\": 1.5,\n  \"user_id\": 202\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							]
						},
						"description": "Place ETH sell order that should match"
					},
					"response": []
				},
				{
					"name": "View ETH Order Book After Trading",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/orderbook?pair=ETH/USDT&depth=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orderbook"
							],
							"query": [
								{
									"key": "pair",
									"value": "ETH/USDT"
								},
								{
									"key": "depth",
									"value": "10"
								}
							]
						},
						"description": "Check ETH order book after matching"
					},
					"response": []
				}
			],
			"description": "ETH trading scenario to test multiple pairs"
		},
		{
			"name": "01. Health Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/ping",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"ping"
					]
				},
				"description": "Test server connectivity"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set dynamic variables if needed",
					"// pm.globals.set('timestamp', new Date().getTime());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test scripts",
					"pm.test('Response time is less than 1000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(1000);",
					"});",
					"",
					"pm.test('Response has valid JSON', function () {",
					"    pm.response.to.be.json;",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "admin-secret-token",
			"type": "string"
		}
	]
}